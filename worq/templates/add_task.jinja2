{% extends "workq_main.jinja2" %}

{% block add_task %}
<!-- Add task -->
<head>
  <link rel="stylesheet" href="{{ request.static_url('worq:static/assets/pm.css') }}">
</head>
<section class="creation1">
  <section class="TCreation2">
  <div class="col-6 bar-wrapper">
    <div class="project-selector-bar dropdown">
      <button class="btn dropdown-toggle"
              type="button"
              id="dropdownMenuButton"
              data-bs-toggle="dropdown"
              data-bs-container="body"
              aria-haspopup="true"
              aria-expanded="false">
        {{ active_project.name }}
      </button>
      <div class="dropdown-menu w-100 dropdown-scroll" aria-labelledby="dropdownMenuButton">
        {% for project in projects %}
          <a class="dropdown-item dropdown-project-item"
             id="{{ project.id }}">{{ project.name }}</a>
        {% endfor %}
      </div>
    </div>
  </div>
    <section class="TCreation3">
      <div class="outside-task">

        <!-- FORMULARIO DE TAREA -->
        <form method="POST" class="add-tasks">
          <h5 class="task-header-container">
            <span class="task-header">Add Task</span>
            <div class="priority-select">
              <label for="priority-select">Priority</label>
              <select id="priority-select" name="priority-select" class="controls">
                {% for p in priorities %}
                  <option value="{{ p.id }}" class="priority-{{ p.id }}">
                    {{ p.priority }}
                  </option>
                {% endfor %}
              </select>
              <input type="hidden" name="priority" id="priority-hidden" value="{{ priorities[0].id }}">
            </div>
          </h5>

          <input type="hidden" name="form_type" value="add_task">
          <input class="controls" type="text" id="title" name="title" placeholder="Title" required>
          <textarea class="controls" type="text" id="description" name="description" placeholder="Description" oninput="autoResize(this)" required></textarea>

          <label><strong>Attachments</strong></label>
          <div>
          <input type="file" name="files" id="files" multiple action="/upload_file" method="POST" enctype="multipart/form-data">
          </div>
          <!-- REQUERIMIENTOS -->
          <label><strong>Requirements</strong></label>
          <div class="scrollable-section" id="req-section">
            <div id="requirements-container">
              <div class="task-items" id="req-template-item">
                <input class="controls requirement-input" type="text" name="requirements" placeholder="Requirement">
                <span class="duplicate-warning" style="display:none; color: #d00; font-size: 0.9em;">
                  You already added this requirement
                </span>
                <span class="material-symbols-outlined btn delete-req" title="Delete requirement">delete</span>
              </div>
            </div>
            <button id="add-req" class="buttons" type="button">+ Add Requirement</button>
          </div>

          <!-- COLABORADORES -->
          <label><strong>Collaborators</strong></label>
          <div class="scrollable-section" id="collab-section">
            <div id="collaborators-container">
              <div class="task-items" id="collab-template-item">
                <input class="controls collaborator-input" type="text" name="collaborators" placeholder="Collaborator" oninput="setupCollaboratorAutocomplete(this)">
                <span class="duplicate-warning" style="display:none; color: #d00; font-size: 0.9em;">
                  You already added this collaborator
                </span>
                <span class="material-symbols-outlined btn delete-collab" title="Delete collaborator">delete</span>
              </div>
            </div>
            <button id="add-collab" class="buttons" type="button">+ Add Collaborator</button>
          </div>

          <div class="add-group">
            <label for="finished_date">Due Date</label>
            <input type="datetime-local" name="finished_date" min="{{ now }}">
            <input class="buttons" type="submit" value="Submit Task">
          </div>
        </form>

        <!-- FORMULARIO DE USUARIO -->
        <form method="POST" class="add-users">
          <h5>Add User</h5>
          <input type="hidden" name="form_type" value="add_user">
          <input type="hidden" id="user_id" name="user_id">
          <div class="search-bar2">
            <input type="text"
                  placeholder="Search User Email"
                  oninput="handleEmailSearchInput(event)">
            <div id="email-autocomplete-results" class="autocomplete-results"></div>
          </div>
          <input class="controls" type="email" id="email" name="email" placeholder="Email Address">
          <input class="buttons" type="submit" value="Assign to Project">
          <!-- Debajo del formulario de agregar usuario -->
          <h5>Project Users</h5>
          <div class="scrollable-section" style="max-height: 200px; overflow-y: auto;">
            <ul>
              {% for u in users_projects %}
                <li>
                  {{ u.name }} ({{ u.email }})
                  <span class="material-symbols-outlined btn delete-user" 
                        title="Remove user" 
                        data-user-id="{{ u.id }}" 
                        data-user-name="{{ u.name }}">
                    group_remove
                  </span>
                </li>
              {% endfor %}
            </ul>
          </div>
        </form>

      </div>
    </section>

    <br>
    <input class="buttons" type="button" value="Back" onclick="history.back();">

  </section>
</section>

<script>
document.addEventListener('DOMContentLoaded', function () {
  /* ---------- VARIABLES GLOBALES ---------- */
  const users        = {{ users | tojson }};
  const projectUsers = {{ users_projects | tojson }};
  let   userToDeleteId = null;

  /* ---------- AUTOSIZE DESCRIPTION ---------- */
  function autoResize(textarea) {
    textarea.style.height = 'auto';
    textarea.style.height = textarea.scrollHeight + 'px';
  }

  /* ---------- DUPLICATE HELPERS ---------- */
  function checkDuplicate(inputEl, containerSelector) {
    const val = inputEl.value.trim().toLowerCase();
    if (!val) return;
    const others = Array.from(
      document.querySelectorAll(containerSelector + ' input')
    )
    .filter(i => i !== inputEl)
    .map(i => i.value.trim().toLowerCase());

    const warn = inputEl.parentElement.querySelector('.duplicate-warning');
    warn.style.display = others.includes(val) ? 'inline' : 'none';
    if (others.includes(val)) inputEl.value = '';
  }

  /* ---------- AUTOCOMPLETE USUARIO ---------- */
  function handleEmailSearchInput(event) {
    const input   = event.target;
    const wrapper = input.parentElement;
    let   results = wrapper.querySelector('.autocomplete-results');
    if (!results) {
      results = document.createElement('div');
      results.className = 'autocomplete-results';
      wrapper.appendChild(results);
    }
    results.innerHTML = '';
    const q = input.value.toLowerCase();
    if (q.length < 1) { results.style.display = 'none'; return; }

    const filtered = users.filter(u => u.email.toLowerCase().includes(q));
    if (!filtered.length) { results.style.display = 'none'; return; }
    results.style.display = 'block';

    filtered.forEach(u => {
      const div   = document.createElement('div');
      div.className = 'autocomplete-item';
      div.textContent = u.email;
      div.onclick = () => {
        input.value   = u.email;
        document.getElementById('user_id').value = u.id;
        document.getElementById('email').value   = u.email;
        results.style.display = 'none';
      };
      results.appendChild(div);
    });
    input.onblur = () => setTimeout(() => { results.style.display = 'none'; }, 150);
  }
  window.handleEmailSearchInput = handleEmailSearchInput;
  window.users = users;
  /* ---------- AUTOCOMPLETE COLLAB ---------- */
  function setupCollaboratorAutocomplete(inputEl) {
    const wrapper = inputEl.parentElement;
    const results = document.createElement('div');
    results.className = 'add-user-autocomplete-results';
    wrapper.appendChild(results);

    inputEl.addEventListener('input', () => {
      const q = inputEl.value.toLowerCase();
      results.innerHTML = '';
      if (q.length < 1) { results.style.display = 'none'; return; }

      const filtered = projectUsers.filter(u => u.email.toLowerCase().includes(q));
      if (!filtered.length) { results.style.display = 'none'; return; }
      results.style.display = 'block';

      filtered.forEach(u => {
        const div = document.createElement('div');
        div.className = 'autocomplete-item';
        div.textContent = u.email;
        div.onclick = () => {
          inputEl.value = u.email;
          results.style.display = 'none';
        };
        results.appendChild(div);
      });
    });
    inputEl.addEventListener('blur', () => {
      setTimeout(() => { results.style.display = 'none'; }, 150);
      checkDuplicate(inputEl, '#collaborators-container');
    });
  }
  window.setupCollaboratorAutocomplete = setupCollaboratorAutocomplete;
  window.users = users;
  /* ---------- PLANTILLAS REQ/COLLAB ---------- */
  const reqTemplate    = document.getElementById('req-template-item').outerHTML;
  const collabTemplate = document.getElementById('collab-template-item').outerHTML;

  document.getElementById('add-req').addEventListener('click', () => {
    const cont = document.getElementById('requirements-container');
    cont.insertAdjacentHTML('beforeend', reqTemplate);
    const inp = cont.querySelector('.task-items:last-child input');
    inp.addEventListener('blur', () => checkDuplicate(inp, '#requirements-container'));
  });

  document.getElementById('add-collab').addEventListener('click', () => {
    const cont = document.getElementById('collaborators-container');
    cont.insertAdjacentHTML('beforeend', collabTemplate);
    const inp = cont.querySelector('.task-items:last-child input');
    setupCollaboratorAutocomplete(inp);
  });

  document.getElementById('requirements-container').addEventListener('click', e => {
    if (e.target.classList.contains('delete-req')) {
      e.target.closest('.task-items').remove();
    }
  });
  document.getElementById('collaborators-container').addEventListener('click', e => {
    if (e.target.classList.contains('delete-collab')) {
      e.target.closest('.task-items').remove();
    }
  });

  /* ---------- PRIORITY SELECT ---------- */
  const sel = document.getElementById('priority-select');
  const hid = document.getElementById('priority-hidden');
  sel.addEventListener('change', () => { hid.value = sel.value; });

  /* ---------- DELETE USER FLOW ---------- */
  document.querySelectorAll('.delete-user').forEach(span => {
    span.addEventListener('click', function () {
      userToDeleteId = this.dataset.userId;
      document.getElementById('confirmDeleteUserModalBody').textContent =
        `Are you sure you want to remove "${this.dataset.userName}" from the project?`;
      new bootstrap.Modal('#confirmDeleteUserModal').show();
    });
  });

  document.getElementById('confirmDeleteUserBtn').addEventListener('click', () => {
    if (!userToDeleteId) return;
    fetch(window.location.pathname, {
      method : 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept'      : 'application/json'
      },
      body   : JSON.stringify({ form_type: 'remove_user', user_id: userToDeleteId })
    })
    .then(r => r.json())
    .then(data => {
      if (data.success) {
        const li = document.querySelector(`.delete-user[data-user-id="${userToDeleteId}"]`).closest('li');
        new bootstrap.Modal('#removeUserSuccessModal').show();
        document.getElementById('removeUserSuccessModal')
          .addEventListener('hidden.bs.modal', function handler () {
            li.remove();
            this.removeEventListener('hidden.bs.modal', handler);
          });
      } else {
        alert(data.error || 'Could not remove user.');
      }
      bootstrap.Modal.getInstance('#confirmDeleteUserModal').hide();
    })
    .catch(e => alert('Request failed: ' + e));
  });

  /* ---------- TASK FORM ---------- */
  const taskForm = document.querySelector('.add-tasks');
  if (taskForm) {
    taskForm.addEventListener('submit', e => {
      e.preventDefault();
      const formData = new FormData(taskForm);
      const requirements  = [...document.querySelectorAll('.requirement-input')].map(i => i.value).filter(Boolean);
      const collaborators = [...document.querySelectorAll('.collaborator-input')].map(i => i.value).filter(Boolean);

      const payload = Object.fromEntries(formData.entries());
      payload.requirements  = requirements;
      payload.collaborators = collaborators;

      fetch(window.location.pathname, {
        method : 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept'      : 'application/json'
        },
        body: JSON.stringify(payload)
      })
      .then(r => r.json())
      .then(data => {
        if (data.success) {
          document.querySelector('#successModal .modal-body').textContent =
            'The task has been added successfully!';
          new bootstrap.Modal('#successModal').show();
          taskForm.reset();
        } else {
          document.querySelector('#errorModal .modal-body').textContent = data.error || 'Unknown error';
          new bootstrap.Modal('#errorModal').show();
        }
      })
      .catch(() => {
        document.querySelector('#errorModal .modal-body').textContent = 'Request failed!';
        new bootstrap.Modal('#errorModal').show();
      });
    });
  }

  /* ---------- USER FORM ---------- */
  const userForm = document.querySelector('.add-users');
  if (userForm) {
    userForm.addEventListener('submit', e => {
      e.preventDefault();
      const payload = Object.fromEntries(new FormData(userForm).entries());
      fetch(window.location.pathname, {
        method : 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept'      : 'application/json'
        },
        body: JSON.stringify(payload)
      })
      .then(r => r.json())
      .then(data => {
        if (data.success) {
          document.querySelector('#successModal .modal-body').textContent =
            'The user has been assigned to the project!';
          new bootstrap.Modal('#successModal').show();
          userForm.reset();
        } else {
          document.querySelector('#errorModal .modal-body').textContent = data.error || 'Unknown error';
          new bootstrap.Modal('#errorModal').show();
        }
      })
      .catch(() => {
        document.querySelector('#errorModal .modal-body').textContent = 'Request failed!';
        new bootstrap.Modal('#errorModal').show();
      });
    });
  }

  /* ---------- LIMPIAR BACKDROP RESIDUAL ---------- */
  document.getElementById('errorModal').addEventListener('hidden.bs.modal', () => {
    document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
    document.body.classList.remove('modal-open');
    document.body.style = '';
  });
});   /* ← ¡Sólo una llave + paréntesis para cerrar DOMContentLoaded! */
</script>

<!-- Modal de éxito -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header bg-success text-white">
        <h5 class="modal-title" id="successModalLabel">Task Added</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        The task has been added successfully!
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-success" data-bs-dismiss="modal">OK</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal de error -->
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header bg-danger text-white">
        <h5 class="modal-title" id="errorModalLabel">Error</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="errorMessage">
        An error occurred while adding the task.
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal de confirmación para eliminar usuario -->
<div class="modal fade" id="confirmDeleteUserModal" tabindex="-1" aria-labelledby="confirmDeleteUserModalLabel">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header bg-warning text-dark">
        <h5 class="modal-title" id="confirmDeleteUserModalLabel">Confirm Remove User</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="confirmDeleteUserModalBody">
        Are you sure you want to remove this user from the project?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteUserBtn">Remove</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal de éxito al eliminar usuario -->
<div class="modal fade" id="removeUserSuccessModal" tabindex="-1" aria-labelledby="removeUserSuccessModalLabel">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header bg-success text-white">
        <h5 class="modal-title" id="removeUserSuccessModalLabel">User Removed</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        The user has been removed from the project successfully!
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-success" data-bs-dismiss="modal">OK</button>
      </div>
    </div>
  </div>
</div>
{% endblock %}
