{% extends "workq_main.jinja2" %}

{% block add_task %}
<section class="creation1">
  <section class="TCreation2">
    <div class="project-selector-bar dropdown">
      <button class="btn dropdown-toggle"
              type="button"
              id="dropdownMenuButton"
              data-bs-toggle="dropdown"
              data-bs-container="body"
              aria-haspopup="true"
              aria-expanded="false">
        {{ active_project.name }}
      </button>
      <div class="dropdown-menu w-100" aria-labelledby="dropdownMenuButton">
        {% for project in projects %}
          <a class="dropdown-item dropdown-project-item"
             id="{{ project.id }}">{{ project.name }}</a>
        {% endfor %}
      </div>
    </div>

    <section class="TCreation3">
      <div class="outside-task">

        <!-- FORMULARIO DE TAREA -->
        <div class="scrollable-task-form">
          <form method="POST" class="add-tasks">
            <h5 class="task-header-container">
                <span class="task-header">Add Task</span>

                <!-- Select de Priority junto al tÃ­tulo -->
                <div class="position-absolute top-0 end-0 p-2 d-flex align-items-center gap-2">
                  <div class="priority-select">
                      <label for="priority-select">Priority</label>
                      <select id="priority-select" name="priority-select" class="controls">
                      {% for p in priorities %}
                          <option value="{{ p.id }}" class="priority-{{ p.id }}">
                          {{ p.priority }}
                          </option>
                      {% endfor %}
                      </select>
                      <!-- Campo oculto para enviar prioridad -->
                      <input type="hidden" name="priority" id="priority-hidden" value="{{ priorities[0].id }}">
                  </div>
                </div>
            </h5>

            <input type="hidden" name="form_type" value="add_task">

            <input class="controls" type="text" id="title" name="title" placeholder="Title" required>
            <input class="controls" type="text" id="description" name="description" placeholder="Description" required>

            <!-- Requerimientos -->
            <div id="requirements-container">
              <div class="task-items">
                <input class="controls requirement-input" type="text" name="requirements" placeholder="Requirement">
                <span class="material-symbols-outlined btn delete-req" title="Delete requirement">delete</span>
              </div>
            </div>
            <button id="add-req" class="buttons" type="button">+ Add Requirement</button>

            <!-- Colaboradores -->
            <div id="collaborators-container">
              <div class="task-items">
                <input class="controls collaborator-input" type="text" name="collaborators" placeholder="Collaborator">
                <span class="material-symbols-outlined btn delete-collab" title="Delete collaborator">delete</span>
              </div>
            </div>
            <button id="add-collab" class="buttons" type="button">+ Add Collaborator</button>

            <div class="add-group">
              <label for="finished_date">Due Date</label>
              <input class="date-button"
                     type="datetime-local"
                     id="finished_date"
                     name="finished_date">
              <input class="buttons" type="submit" value="Submit Task">
            </div>
          </form>
        </div>

        <!-- FORMULARIO DE USUARIO (sin cambios) -->
        <form method="POST" class="add-users">
          <h5>Add User</h5>
          <input type="hidden" name="form_type" value="add_user">
          <input type="hidden" id="user_id" name="user_id">
          <div class="search-bar2">
            <input type="text"
                   id="email-search-input"
                   placeholder="Search User Email"
                   oninput="handleEmailSearchInput(event)">
            <div id="email-autocomplete-results"
                 class="add-user-autocomplete-results"></div>
          </div>
          <input class="controls" type="email" id="email" name="email" placeholder="Email Address">
          <select class="controls" id="role" name="role_id" required>
            <option value="" disabled selected>Select a Role</option>
            {% for role in roles %}
              <option value="{{ role.id }}">{{ role.name }}</option>
            {% endfor %}
          </select>
          <input class="buttons" type="submit" value="Assign to Project">
        </form>

      </div>
    </section>

    <br>
    <input class="buttons" type="button" value="Back" onclick="history.back();">

  </section>
</section>

<script>
const users = {{ users | tojson }};
const projectUsers = {{ users_projects | tojson }};

// Autocompletado de usuarios (sin cambios)
function handleEmailSearchInput(event) {
    const query = event.target.value.toLowerCase();
    const resultsContainer = document.getElementById("email-autocomplete-results");
    resultsContainer.innerHTML = "";

    if (query.length < 1) {
        resultsContainer.style.display = "none";
        return;
    }

    const filteredUsers = users.filter(user =>
        user.email.toLowerCase().includes(query)
    );

    if (filteredUsers.length > 0) {
        resultsContainer.style.display = "block";
        filteredUsers.forEach(user => {
            const item = document.createElement("div");
            item.className = "autocomplete-item";
            item.textContent = user.email;
            item.onclick = () => {
                document.getElementById("email-search-input").value = user.email;
                document.getElementById("user_id").value = user.id;
                document.getElementById("email").value = user.email;
                resultsContainer.style.display = "none";
            };
            resultsContainer.appendChild(item);
        });
    } else {
        resultsContainer.style.display = "none";
    }
}

// Autocompletado de colaboradores (solo miembros del proyecto activo)
function setupCollaboratorAutocomplete(inputElement) {
    const wrapper = inputElement.parentElement;
    let resultsContainer = document.createElement("div");
    resultsContainer.className = "autocomplete-results";
    wrapper.appendChild(resultsContainer);

    inputElement.addEventListener("input", function() {
        const query = inputElement.value.toLowerCase();
        resultsContainer.innerHTML = "";

        if (query.length < 1) {
            resultsContainer.style.display = "none";
            return;
        }

        const filtered = projectUsers.filter(user =>
            user.email.toLowerCase().includes(query)
        );

        if (filtered.length > 0) {
            resultsContainer.style.display = "block";
            filtered.forEach(user => {
                const item = document.createElement("div");
                item.className = "autocomplete-item";
                item.textContent = user.email;
                item.onclick = () => {
                    inputElement.value = user.email;
                    resultsContainer.style.display = "none";
                };
                resultsContainer.appendChild(item);
            });
        } else {
            resultsContainer.style.display = "none";
        }
    });
}

// Inicializar autocompletado para el input original
setupCollaboratorAutocomplete(document.querySelector(".collaborator-input"));

// Autocompletado para inputs nuevos
document.getElementById("add-collab").addEventListener("click", () => {
    const inputs = document.querySelectorAll(".collaborator-input");
    const last = inputs[inputs.length - 1];
    setupCollaboratorAutocomplete(last);
});

// Agregar nuevo input de requisito
function addRequirementInput() {
    const container = document.getElementById('requirements-container');

    const item = document.createElement('div');
    item.className = 'task-item';

    const input = document.createElement('input');
    input.className = 'controls requirement-input';
    input.type = 'text';
    input.name = 'requirements';
    input.placeholder = 'Requirement';

    const del = document.createElement('span');
    del.className = 'material-symbols-outlined btn delete-req';
    del.title = 'Delete requirement';
    del.textContent = 'delete';

    item.appendChild(input);
    item.appendChild(del);
    container.appendChild(item);
}

// Agregar nuevo input de colaborador
function addCollaboratorInput() {
    const container = document.getElementById('collaborators-container');

    const item = document.createElement('div');
    item.className = 'task-item';

    const input = document.createElement('input');
    input.className = 'controls collaborator-input';
    input.type = 'text';
    input.name = 'collaborators';
    input.placeholder = 'Collaborator';

    const del = document.createElement('span');
    del.className = 'material-symbols-outlined btn delete-collab';
    del.title = 'Delete collaborator';
    del.textContent = 'delete';

    item.appendChild(input);
    item.appendChild(del);
    container.appendChild(item);
}

// Eliminar requisito (delegado)
document.getElementById('requirements-container')
  .addEventListener('click', function(e) {
    if (e.target.classList.contains('delete-req')) {
      const item = e.target.closest('.task-item');
      if (item) item.remove();
    }
});

// Eliminar colaborador (delegado)
document.getElementById('collaborators-container')
  .addEventListener('click', function(e) {
    if (e.target.classList.contains('delete-collab')) {
      const item = e.target.closest('.task-item');
      if (item) item.remove();
    }
});

// Eventos de botones + Add
document.getElementById('add-req')
  .addEventListener('click', addRequirementInput);
document.getElementById('add-collab')
  .addEventListener('click', addCollaboratorInput);

// â NUEVO: sincronizar el select con el hidden
const sel = document.getElementById('priority-select');
const hid = document.getElementById('priority-hidden');
sel.addEventListener('change', () => hid.value = sel.value);
</script>
{% endblock %}
