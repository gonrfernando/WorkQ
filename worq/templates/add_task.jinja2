{% extends "workq_main.jinja2" %}

{% block add_task %}
<section class="creation1">
  <section class="TCreation2">
    <div class="project-selector-bar dropdown">
      <button class="btn dropdown-toggle"
              type="button"
              id="dropdownMenuButton"
              data-bs-toggle="dropdown"
              data-bs-container="body"
              aria-haspopup="true"
              aria-expanded="false">
        {{ active_project.name }}
      </button>
      <div class="dropdown-menu w-100" aria-labelledby="dropdownMenuButton">
        {% for project in projects %}
          <a class="dropdown-item dropdown-project-item"
             id="{{ project.id }}">{{ project.name }}</a>
        {% endfor %}
      </div>
    </div>

    <section class="TCreation3">
      <div class="outside-task">

        <!-- FORMULARIO DE TAREA -->
        <form method="POST" class="add-tasks">
          <h5 class="task-header-container">
            <span class="task-header">Add Task</span>
            <div class="priority-select">
              <label for="priority-select">Priority</label>
              <select id="priority-select" name="priority-select" class="controls">
                {% for p in priorities %}
                  <option value="{{ p.id }}" class="priority-{{ p.id }}">
                    {{ p.priority }}
                  </option>
                {% endfor %}
              </select>
              <input type="hidden" name="priority" id="priority-hidden" value="{{ priorities[0].id }}">
            </div>
          </h5>

          <input type="hidden" name="form_type" value="add_task">
          <input class="controls" type="text" id="title" name="title" placeholder="Title" required>
          <input class="controls" type="text" id="description" name="description" placeholder="Description" required>

          <!-- REQUERIMIENTOS -->
          <label><strong>Requirements</strong></label>
          <div class="scrollable-section" id="req-section">
            <div id="requirements-container">
              <div class="task-items" id="req-template-item">
                <input class="controls requirement-input" type="text" name="requirements" placeholder="Requirement">
                <span class="duplicate-warning" style="display:none; color: #d00; font-size: 0.9em;">
                  Ya agregaste este requisito
                </span>
                <span class="material-symbols-outlined btn delete-req" title="Delete requirement">delete</span>
              </div>
            </div>
            <button id="add-req" class="buttons" type="button">+ Add Requirement</button>
          </div>

          <!-- COLABORADORES -->
          <label><strong>Collaborators</strong></label>
          <div class="scrollable-section" id="collab-section">
            <div id="collaborators-container">
              <div class="task-items" id="collab-template-item">
                <input class="controls collaborator-input" type="text" name="collaborators" placeholder="Collaborator">
                <span class="duplicate-warning" style="display:none; color: #d00; font-size: 0.9em;">
                  Ya agregaste este colaborador
                </span>
                <span class="material-symbols-outlined btn delete-collab" title="Delete collaborator">delete</span>
              </div>
            </div>
            <button id="add-collab" class="buttons" type="button">+ Add Collaborator</button>
          </div>

          <div class="add-group">
            <label for="finished_date">Due Date</label>
            <input class="date-button" type="datetime-local" id="finished_date" name="finished_date">
            <input class="buttons" type="submit" value="Submit Task">
          </div>
        </form>

        <!-- FORMULARIO DE USUARIO -->
        <form method="POST" class="add-users">
          <h5>Add User</h5>
          <input type="hidden" name="form_type" value="add_user">
          <input type="hidden" id="user_id" name="user_id">
          <div class="search-bar2">
            <input type="text"
                   id="email-search-input"
                   placeholder="Search User Email"
                   oninput="handleEmailSearchInput(event)">
            <div id="email-autocomplete-results" class="add-user-autocomplete-results"></div>
          </div>
          <input class="controls" type="email" id="email" name="email" placeholder="Email Address">
          <select class="controls" id="role" name="role_id" required>
            <option value="" disabled selected>Select a Role</option>
            {% for role in roles %}
              <option value="{{ role.id }}">{{ role.name }}</option>
            {% endfor %}
          </select>
          <input class="buttons" type="submit" value="Assign to Project">
        </form>

      </div>
    </section>

    <br>
    <input class="buttons" type="button" value="Back" onclick="history.back();">

  </section>
</section>

<script>
const users = {{ users | tojson }};
const projectUsers = {{ users_projects | tojson }};

// 1) Guardamos las plantillas originales (HTML puro)
const reqTemplate = document.getElementById("req-template-item").outerHTML;
const collabTemplate = document.getElementById("collab-template-item").outerHTML;

// 2) Función genérica para prevenir duplicados
function checkDuplicate(inputEl, containerSelector) {
  const val = inputEl.value.trim().toLowerCase();
  if (!val) return;
  const others = Array.from(document.querySelectorAll(containerSelector + " input"))
    .filter(i => i !== inputEl)
    .map(i => i.value.trim().toLowerCase());
  const warning = inputEl.parentElement.querySelector(".duplicate-warning");
  if (others.includes(val)) {
    warning.style.display = "inline";
    inputEl.value = "";
  } else {
    warning.style.display = "none";
  }
}

// 3) Autocomplete para usuarios existentes
function handleEmailSearchInput(event) {
  const query = event.target.value.toLowerCase();
  const resultsContainer = document.getElementById("email-autocomplete-results");
  resultsContainer.innerHTML = "";
  if (query.length < 1) { resultsContainer.style.display = "none"; return; }

  const filtered = users.filter(u => u.email.toLowerCase().includes(query));
  if (!filtered.length) { resultsContainer.style.display = "none"; return; }
  resultsContainer.style.display = "block";

  filtered.forEach(u => {
    const div = document.createElement("div");
    div.className = "autocomplete-item";
    div.textContent = u.email;
    div.onclick = () => {
      document.getElementById("email-search-input").value = u.email;
      document.getElementById("user_id").value = u.id;
      document.getElementById("email").value = u.email;
      resultsContainer.style.display = "none";
    };
    resultsContainer.appendChild(div);
  });
}

// 4) Autocomplete para colaboradores (igual que usuarios, pero filtrado por proyecto)
function setupCollaboratorAutocomplete(inputEl) {
  const wrapper = inputEl.parentElement;
  const resultsContainer = document.createElement("div");
  resultsContainer.className = "add-user-autocomplete-results";
  wrapper.appendChild(resultsContainer);

  inputEl.addEventListener("input", () => {
    const q = inputEl.value.toLowerCase();
    resultsContainer.innerHTML = "";
    if (q.length < 1) { resultsContainer.style.display = "none"; return; }

    const filtered = projectUsers.filter(u => u.email.toLowerCase().includes(q));
    if (!filtered.length) { resultsContainer.style.display = "none"; return; }
    resultsContainer.style.display = "block";

    filtered.forEach(u => {
      const div = document.createElement("div");
      div.className = "autocomplete-item";
      div.textContent = u.email;
      div.onclick = () => {
        inputEl.value = u.email;
        resultsContainer.style.display = "none";
      };
      resultsContainer.appendChild(div);
    });
  });

  inputEl.addEventListener("blur", () => {
    setTimeout(() => { resultsContainer.style.display = "none"; }, 150);
    checkDuplicate(inputEl, "#collaborators-container");
  });
}

// 5) Inicializa autocomplete en el primer collaborator
setupCollaboratorAutocomplete(document.querySelector(".collaborator-input"));

// 6) Añadir nuevo requirement
document.getElementById("add-req").addEventListener("click", () => {
  const cont = document.getElementById("requirements-container");
  const wrapper = document.createElement("div");
  wrapper.innerHTML = reqTemplate;
  cont.appendChild(wrapper.firstElementChild);
  const inp = cont.querySelector(".task-items:last-child input");
  inp.addEventListener("blur", () => checkDuplicate(inp, "#requirements-container"));
});

// 7) Añadir nuevo collaborator
document.getElementById("add-collab").addEventListener("click", () => {
  const cont = document.getElementById("collaborators-container");
  const wrapper = document.createElement("div");
  wrapper.innerHTML = collabTemplate;
  cont.appendChild(wrapper.firstElementChild);
  const inp = cont.querySelector(".task-items:last-child input");
  setupCollaboratorAutocomplete(inp);
});

// 8) Delegación de delete
document.getElementById("requirements-container").addEventListener("click", e => {
  if (e.target.classList.contains("delete-req")) {
    e.target.closest(".task-items").remove();
  }
});
document.getElementById("collaborators-container").addEventListener("click", e => {
  if (e.target.classList.contains("delete-collab")) {
    e.target.closest(".task-items").remove();
  }
});

// 9) Sincronizar select/hidden priority
const sel = document.getElementById("priority-select");
const hid = document.getElementById("priority-hidden");
sel.addEventListener("change", () => hid.value = sel.value);

// --- Función para resetear campos de ambos formularios ---
function resetFormFields(form) {
  form.reset();
  if (form.classList.contains('add-users')) {
    document.getElementById('user_id').value = '';
    document.getElementById('email-search-input').value = '';
    document.getElementById('email-autocomplete-results').innerHTML = '';
  }
  // Si quieres limpiar requirements/collaborators extra, puedes hacerlo aquí
}

// --- AJAX para ambos formularios con mensajes personalizados ---
document.addEventListener('DOMContentLoaded', function() {
  // FORMULARIO DE TAREA
  const taskForm = document.querySelector('.add-tasks');
  if (taskForm) {
    taskForm.addEventListener('submit', function(event) {
      event.preventDefault();

      const formData = new FormData(taskForm);
      const requirements = Array.from(document.querySelectorAll('.requirement-input')).map(input => input.value).filter(Boolean);
      const collaborators = Array.from(document.querySelectorAll('.collaborator-input')).map(input => input.value).filter(Boolean);
      formData.delete('requirements');
      formData.delete('collaborators');
      requirements.forEach(req => formData.append('requirements', req));
      collaborators.forEach(col => formData.append('collaborators', col));
      const jsonData = Object.fromEntries(formData.entries());

      fetch(window.location.pathname, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(jsonData)
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          document.getElementById('successModalLabel').innerText = 'Task Added';
          document.querySelector('#successModal .modal-body').innerText = 'The task has been added successfully!';
          const successModal = new bootstrap.Modal(document.getElementById('successModal'));
          successModal.show();
          resetFormFields(taskForm);
        } else {
          document.getElementById('errorModalLabel').innerText = 'Error';
          document.getElementById('errorMessage').innerText = data.error || 'Unknown error';
          const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
          errorModal.show();
        }
      })
      .catch(error => {
        document.getElementById('errorModalLabel').innerText = 'Error';
        document.getElementById('errorMessage').innerText = 'Request failed!';
        const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
        errorModal.show();
      });
    });
  }

  // FORMULARIO DE USUARIO
  const userForm = document.querySelector('.add-users');
  if (userForm) {
    userForm.addEventListener('submit', function(event) {
      event.preventDefault();

      const formData = new FormData(userForm);
      const jsonData = Object.fromEntries(formData.entries());

      fetch(window.location.pathname, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(jsonData)
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          document.getElementById('successModalLabel').innerText = 'User Assigned';
          document.querySelector('#successModal .modal-body').innerText = 'The user has been assigned to the project!';
          const successModal = new bootstrap.Modal(document.getElementById('successModal'));
          successModal.show();
          resetFormFields(userForm);
        } else {
          document.getElementById('errorModalLabel').innerText = 'Error';
          document.getElementById('errorMessage').innerText = data.error || 'Unknown error';
          const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
          errorModal.show();
        }
      })
      .catch(error => {
        document.getElementById('errorModalLabel').innerText = 'Error';
        document.getElementById('errorMessage').innerText = 'Request failed!';
        const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
        errorModal.show();
      });
    });
  }
});
</script>
<!-- Modal de éxito -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header bg-success text-white">
        <h5 class="modal-title" id="successModalLabel">Task Added</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        The task has been added successfully!
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-success" data-bs-dismiss="modal">OK</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal de error -->
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header bg-danger text-white">
        <h5 class="modal-title" id="errorModalLabel">Error</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="errorMessage">
        An error occurred while adding the task.
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>
{% endblock %}
