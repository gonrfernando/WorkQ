{"name": "test_login_success", "status": "broken", "statusDetails": {"message": "sqlalchemy.exc.ProgrammingError: (psycopg2.errors.UndefinedTable) relation \"areas_id_seq\" does not exist\nLINE 3:  id INTEGER DEFAULT nextval('areas_id_seq'::regclass) NOT NU...\n                                    ^\n\n[SQL: \nCREATE TABLE areas (\n\tid INTEGER DEFAULT nextval('areas_id_seq'::regclass) NOT NULL, \n\tarea VARCHAR NOT NULL, \n\tPRIMARY KEY (id)\n)\n\n]\n(Background on this error at: https://sqlalche.me/e/14/f405)", "trace": "self = <sqlalchemy.engine.base.Connection object at 0x000002740DC2D070>, dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x000002740DA371D0>\nconstructor = <bound method DefaultExecutionContext._init_ddl of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>\nstatement = \"\\nCREATE TABLE areas (\\n\\tid INTEGER DEFAULT nextval('areas_id_seq'::regclass) NOT NULL, \\n\\tarea VARCHAR NOT NULL, \\n\\tPRIMARY KEY (id)\\n)\\n\\n\", parameters = {}\nexecution_options = immutabledict({'autocommit': True}), args = (<sqlalchemy.dialects.postgresql.base.PGDDLCompiler object at 0x000002740DCA20C0>,), kw = {}\nbranched = <sqlalchemy.engine.base.Connection object at 0x000002740DC2D070>, yp = None, conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x000002740DBF14C0>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x000002740DCA2210>, cursor = <cursor object at 0x000002740DC082E0; closed: -1>\nevt_handled = False\n\n    def _execute_context(\n        self,\n        dialect,\n        constructor,\n        statement,\n        parameters,\n        execution_options,\n        *args,\n        **kw\n    ):\n        \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n        a :class:`_engine.CursorResult`.\"\"\"\n    \n        branched = self\n        if self.__branch_from:\n            # if this is a \"branched\" connection, do everything in terms\n            # of the \"root\" connection, *except* for .close(), which is\n            # the only feature that branching provides\n            self = self.__branch_from\n    \n        if execution_options:\n            yp = execution_options.get(\"yield_per\", None)\n            if yp:\n                execution_options = execution_options.union(\n                    {\"stream_results\": True, \"max_row_buffer\": yp}\n                )\n    \n        try:\n            conn = self._dbapi_connection\n            if conn is None:\n                conn = self._revalidate_connection()\n    \n            context = constructor(\n                dialect, self, conn, execution_options, *args, **kw\n            )\n        except (exc.PendingRollbackError, exc.ResourceClosedError):\n            raise\n        except BaseException as e:\n            self._handle_dbapi_exception(\n                e, util.text_type(statement), parameters, None, None\n            )\n    \n        if (\n            self._transaction\n            and not self._transaction.is_active\n            or (\n                self._nested_transaction\n                and not self._nested_transaction.is_active\n            )\n        ):\n            self._invalid_transaction()\n    \n        elif self._trans_context_manager:\n            TransactionalContext._trans_ctx_check(self)\n    \n        if self._is_future and self._transaction is None:\n            self._autobegin()\n    \n        context.pre_exec()\n    \n        if dialect.use_setinputsizes:\n            context._set_input_sizes()\n    \n        cursor, statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        if not context.executemany:\n            parameters = parameters[0]\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                statement, parameters = fn(\n                    self,\n                    cursor,\n                    statement,\n                    parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n    \n            self._log_info(statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        parameters, batches=10, ismulti=context.executemany\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n                    % (stats,)\n                )\n    \n        evt_handled = False\n        try:\n            if context.executemany:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(cursor, statement, parameters, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor, statement, parameters, context\n                    )\n            elif not parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, statement, context\n                    )\n            else:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(cursor, statement, parameters, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, statement, parameters, context\n                    )\n\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1910: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x000002740DA371D0>, cursor = <cursor object at 0x000002740DC082E0; closed: -1>\nstatement = \"\\nCREATE TABLE areas (\\n\\tid INTEGER DEFAULT nextval('areas_id_seq'::regclass) NOT NULL, \\n\\tarea VARCHAR NOT NULL, \\n\\tPRIMARY KEY (id)\\n)\\n\\n\", parameters = {}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x000002740DCA2210>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.UndefinedTable: relation \"areas_id_seq\" does not exist\nE       LINE 3:  id INTEGER DEFAULT nextval('areas_id_seq'::regclass) NOT NU...\nE                                           ^\n\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:736: UndefinedTable\n\nThe above exception was the direct cause of the following exception:\n\nengine = Engine(postgresql://postgres:***@3.137.178.132/test_db)\n\n    @pytest.fixture(scope='session')\n    def tables(engine):\n>       Base.metadata.create_all(bind=engine)\n\ntests\\conftest.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\schema.py:4930: in create_all\n    bind._run_ddl_visitor(\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3238: in _run_ddl_visitor\n    conn._run_ddl_visitor(visitorcallable, element, **kwargs)\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2221: in _run_ddl_visitor\n    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:524: in traverse_single\n    return meth(obj, **kw)\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:855: in visit_metadata\n    self.traverse_single(\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:524: in traverse_single\n    return meth(obj, **kw)\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:899: in visit_table\n    self.connection.execute(\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1385: in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:80: in _execute_on_connection\n    return connection._execute_ddl(\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1477: in _execute_ddl\n    ret = self._execute_context(\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1953: in _execute_context\n    self._handle_dbapi_exception(\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2134: in _handle_dbapi_exception\n    util.raise_(\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\compat.py:211: in raise_\n    raise exception\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1910: in _execute_context\n    self.dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x000002740DA371D0>, cursor = <cursor object at 0x000002740DC082E0; closed: -1>\nstatement = \"\\nCREATE TABLE areas (\\n\\tid INTEGER DEFAULT nextval('areas_id_seq'::regclass) NOT NULL, \\n\\tarea VARCHAR NOT NULL, \\n\\tPRIMARY KEY (id)\\n)\\n\\n\", parameters = {}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x000002740DCA2210>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.ProgrammingError: (psycopg2.errors.UndefinedTable) relation \"areas_id_seq\" does not exist\nE       LINE 3:  id INTEGER DEFAULT nextval('areas_id_seq'::regclass) NOT NU...\nE                                           ^\nE       \nE       [SQL: \nE       CREATE TABLE areas (\nE       \tid INTEGER DEFAULT nextval('areas_id_seq'::regclass) NOT NULL, \nE       \tarea VARCHAR NOT NULL, \nE       \tPRIMARY KEY (id)\nE       )\nE       \nE       ]\nE       (Background on this error at: https://sqlalche.me/e/14/f405)\n\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:736: ProgrammingError"}, "start": 1750302950048, "stop": 1750302950048, "uuid": "1426c6fa-5298-42c1-9a3d-dbab164c0928", "historyId": "1b141e24adce9ddcf3bb10db3b505879", "testCaseId": "1b141e24adce9ddcf3bb10db3b505879", "fullName": "tests.views.test_auth_views#test_login_success", "labels": [{"name": "parentSuite", "value": "tests.views"}, {"name": "suite", "value": "test_auth_views"}, {"name": "host", "value": "Laptop-de-Javis"}, {"name": "thread", "value": "23480-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.views.test_auth_views"}]}